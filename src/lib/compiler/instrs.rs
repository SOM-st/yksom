#[derive(Clone, Copy, Debug)]
pub enum Instr {
    Array(usize),
    Block(usize),
    GlobalLookup(usize),
    ClosureReturn(usize),
    Double(f64),
    InstVarLookup(usize),
    InstVarSet(usize),
    Int(isize),
    Pop,
    Return,
    Send(usize, usize),
    String(usize),
    SuperSend(usize, usize),
    Symbol(usize),
    VarLookup(usize, usize),
    VarSet(usize, usize),
}

#[derive(Clone, Copy, Debug)]
pub enum Primitive {
    Add,
    And,
    As32BitSignedValue,
    As32BitUnsignedValue,
    AsInteger,
    AsString,
    AsSymbol,
    At,
    AtPut,
    AtRandom,
    BitXor,
    Class,
    Cos,
    Concatenate,
    Div,
    DoubleDiv,
    Equals,
    Exit,
    Fields,
    FromString,
    FullGC,
    Global,
    GlobalPut,
    GreaterThan,
    GreaterThanEquals,
    Halt,
    HasGlobal,
    Hashcode,
    Holder,
    Inspect,
    InstVarAt,
    InstVarAtPut,
    InstVarNamed,
    InvokeOnWith,
    IsDigits,
    IsLetters,
    IsWhiteSpace,
    Length,
    Load,
    LessThan,
    LessThanEquals,
    Methods,
    Mod,
    Mul,
    Name,
    NotEquals,
    New,
    NewArray,
    ObjectSize,
    Perform,
    PerformInSuperClass,
    PerformWithArguments,
    PerformWithArgumentsInSuperClass,
    PositiveInfinity,
    PrimSubstringFromTo,
    PrintNewline,
    PrintString,
    RefEquals,
    Rem,
    Restart,
    Round,
    Shl,
    Shr,
    Signature,
    Sin,
    Sqrt,
    Sub,
    Superclass,
    Ticks,
    Time,
    /// Is this `value` (0), `value:` (1), or `value:with:` (2)?
    Value(u8),
}
